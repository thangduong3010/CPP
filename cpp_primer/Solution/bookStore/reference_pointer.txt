// reference is like an alias
int ival = 1024;
int &refVal = ival; // refVal refers to (another name for) ival
int &refVal2; // error: a reference must be initialised

// pointer is like taking the address of an object
int *ip1, *ip2; // both are pointers to int
double dp, *dp2; // dp2 is a pointer to double

int ival = 42;
int *p = &ival; // p hold the address of ival

double dval;
double *pd = &dval;	// ok, initialiser is the addr of a double
double *pd2 = pd; // ok, initialiser is a pointer to double
int *pi = pd; // error, types of pi and pd differ
pi = &dval; // error, assigning the addr of a double to an int

int ival = 42;
int *p = &ival; // p holds address of ival; p is a pointer to ival
std::cout << *p; // * yields the object to which p points; print 42
*p = 0; // actually assign to ival, now ival = 0

double obj = 3.14, *pd = &obj;
// ok, void* can hold address value of any data pointer type
void *pv = &obj;
pv = pd;